{"version":3,"sources":["components/Fetch.js","components/WeatherCard.js","components/WeatherList.js","App.js","index.js"],"names":["UseFetch","initialUrl","useState","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","catch","CardBody","styled","div","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","variant","src","alt","toLocaleDateString","toLocaleTimeString","CardBodyContainer","WeatherList","weathers","pop","map","temp","weather","max","min","Header","HeaderFetchContent","App","Fetch","city","setCity","console","log","STHLM","BERLIN","OSLO","className","value","onChange","event","target","lat","lon","createUrl","daily","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.27ffb84c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst UseFetch = (initialUrl) => {\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n    const [url, setUrl] = useState(initialUrl);\n\n    useEffect(() => {\n        if (!url) return;\n        setIsLoading(true);\n        setData(null);\n        setError(null);\n\n        fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                setIsLoading(false);\n                setData(data);\n            })\n            .catch((error) => {\n                setIsLoading(false);\n                setError(error);\n            });\n    }, [url]);\n\n\n    return { data, error, isLoading, setUrl };\n};\n\nexport default UseFetch;","import React from 'react';\nimport styled from 'styled-components';\n\nconst CardBody = styled.div`\nmargin: 1rem;\ntext-align: center;\nheight: 280px;\nwidth: 200px;\nborder-radius: 20px;\ncolor: grey;\nbox-shadow: 0 4px 8px 0 grey;\nbackground-image: none;\nbackground-color: white;\n`;\n\nconst WeatherCard = ({ dt, temp_min, temp_max, main, icon }) => {\n    const date = new Date(dt);\n    return (\n        <CardBody>\n            <img \n                variant=\"top\"\n                src={`http://openweathermap.org/img/wn/${icon}@2x.png`} alt=\"img\"\n            />\n            <p>{main}</p>\n            <p>\n                {date.toLocaleDateString()} - {date.toLocaleTimeString()}\n            </p>\n            <p>Min: {temp_min}</p>\n            <p>Max: {temp_max}</p>\n        </CardBody>\n    );\n};\n\nexport default WeatherCard;","import React from 'react'\nimport WeatherCard from './WeatherCard';\nimport styled from 'styled-components';\n\nconst CardBodyContainer = styled.div`\ndisplay: flex;\nflex-flow: row wrap;\njustify-content: center;\nbackground-color: transparent;\n`;\n\nconst WeatherList = ({ weathers }) => {\n    weathers.pop();\n    return (\n        <CardBodyContainer>\n            {weathers.map(({ dt, temp, weather }) => (\n                <div key={dt}>\n                    <WeatherCard temp_max={temp.max} temp_min={temp.min} dt={dt * 1000} main={weather[0].main} icon={weather[0].icon} />\n                </div>\n            ))}\n        </CardBodyContainer>\n    )\n}\n\nexport default WeatherList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Fetch from './components/Fetch';\nimport WeatherList from './components/WeatherList';\nimport styled from 'styled-components';\n\nconst Header = styled.div`\nbackground-image: none;\nbackground-color: transparent;\npadding: 2rem;\nfont-size: 40px;\ncolor: grey;\nfont-weight: bolder;\n`;\n\nconst HeaderFetchContent = styled.div`\nmargin: 1rem;\nfont-size: 30px;\ncolor: grey;\nfont-weight: light;\n`;\n\nconst App = () => {\n  const { data, error, isLoading, setUrl } = Fetch();\n  const [city, setCity] = useState('');\n\n  useEffect(() => {\n    console.log(city)\n  }, [city]);\n\n  const ENDPOINT = 'https://api.openweathermap.org/';\n  const PART = 'hourly,minutely,current,alerts';\n  const KEY = '3cfb96dd5ec2730ca9ea11397535e2b7';\n\n  const STHLM = ['59.32', '18.06'];\n  const BERLIN = ['52.52', '13.40'];\n  const OSLO = ['59.91', '10.75'];\n  let url = \"\";\n\n  function createUrl(event) {\n    setCity(event.target.value);\n    console.log(city + 34)\n    let lat = '';\n    let lon = '';\n\n    if (city === 'sthlm') {\n      lat = STHLM[0];\n      lon = STHLM[1];\n    } else if (city === 'berlin') {\n      lat = BERLIN[0];\n      lon = BERLIN[1];\n    } else {\n      lat = OSLO[0];\n      lon = OSLO[1];\n    }\n    url = `${ENDPOINT}data/2.5/onecall?lat=` + lat + `&lon=` + lon + `&exclude=${PART}&units=metric&appid=${KEY}`;\n    setUrl(url);\n  };\n\n  const fetchContent = () => {\n    if (error) return <HeaderFetchContent>Error when fetching: {error}</HeaderFetchContent>\n    if (!data && isLoading) return <HeaderFetchContent>LOADING...</HeaderFetchContent>\n    if (!data) return null;\n    return <WeatherList weathers={data.daily} />\n  };\n\n  return (\n    <div className=\"App\">\n      <Header>Weather app</Header>\n      <select className=\"select\" value={city} onChange={event => createUrl(event)}>\n        <option value='cities'> -- choose city -- </option>\n        <option value='sthlm'> STOCKHOLM </option>\n        <option value='berlin'> BERLIN </option>\n        <option value='oslo'> OSLO </option>\n      </select>\n\n      {fetchContent()}\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}